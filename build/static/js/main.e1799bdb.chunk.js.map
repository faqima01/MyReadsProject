{"version":3,"sources":["BooksAPI.js","Components/MainPage/MoveBook.js","Components/MainPage/BookListing.js","Components/MainPage/Shelf.js","Components/MainPage/MainPage.js","Components/SearchPage/SearchResults.js","Components/SearchPage/SearchPage.js","Components/App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","MoveBook","event","book","shelf","bookID","id","this","props","optionValue","target","value","fetch","concat","method","Object","objectSpread","Content-Type","body","JSON","stringify","then","res","json","msg","console","log","catch","_this","currentShelf","react_default","a","createElement","className","onChange","handleSubmit","defaultValue","disabled","Component","BookListing","_props$bookProperties","bookProperties","name","authors","image","ID","style","width","height","backgroundImage","MainPage_MoveBook","map","author","index","key","Shelf","shelfTitle","shelfBooks","shelfBook","MainPage_BookListing","MainPage","currentlyReading","wantToRead","read","MainPage_Shelf","react_router_dom","to","SearchResults","searchResults","searchResult","SearchPage","state","term","query","_this2","setState","trim","data","books","results","forEach","result","_step","_iterator","_createForOfIteratorHelper","shelfedBooks","s","n","done","bookObject","err","e","f","title","imageLinks","smallThumbnail","prevState","_this3","type","placeholder","ref","input","textInput","debounce","search","SearchPage_SearchResults","App","bookShelf","defineProperty","_this$state","toConsumableArray","react_router","exact","path","render","MainPage_MainPage","Components_SearchPage_SearchPage","ReactDOM","Components_App","document","getElementById"],"mappings":"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","file":"static/js/main.e1799bdb.chunk.js","sourcesContent":["\r\nconst api = \"https://reactnd-books-api.udacity.com\"\r\n\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token\r\nif (!token)\r\n  token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n  'Accept': 'application/json',\r\n  'Authorization': token\r\n}\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.book)\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.books)\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ shelf })\r\n  }).then(res => res.json())\r\n\r\nexport const search = (query) =>\r\n  fetch(`${api}/search`, {\r\n    method: 'POST',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ query })\r\n  }).then(res => res.json())\r\n    .then(data => data.books)\r\n","import React, { Component } from 'react';\r\nimport * as BooksAPI from './../../BooksAPI';\r\nimport './../../App.css';\r\n\r\n/**\r\n * @description handles the MoveBook dropdown component that moves books between shelves\r\n * @extends Component\r\n */\r\nclass MoveBook extends Component {\r\n    /**\r\n     * @description Moves the book to the selected shelf with BooksAPI.update\r\n     * @param {event} event - The event of user's selection from the dropdown\r\n     */\r\n    handleSubmit(event) {\r\n        const bookID = { id: this.props.bookID };\r\n        const optionValue = event.target.value;\r\n        BooksAPI.update(bookID, optionValue)\r\n            .then(msg => console.log('Successfully moved the book!'))\r\n            .catch(msg => console.log('Failed to move the book!'));\r\n    }\r\n\r\n    render() {\r\n        const { currentShelf } = this.props;\r\n\r\n        return (\r\n            <div>\r\n                <div className='book-shelf-changer'>\r\n                    <select\r\n                        onChange={event => this.handleSubmit(event)}\r\n                        defaultValue={currentShelf}\r\n                    >\r\n                        <option value='move' disabled>\r\n                            Move to...\r\n                        </option>\r\n                        <option value='currentlyReading'>\r\n                            Currently Reading\r\n                        </option>\r\n                        <option value='wantToRead'>Want to Read</option>\r\n                        <option value='read'>Read</option>\r\n                        <option value='none'>None</option>\r\n                    </select>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MoveBook;\r\n","import React from 'react';\r\nimport MoveBook from './MoveBook';\r\nimport './../../App.css';\r\n\r\n/**\r\n * @description Represents the book component in each shelf and search page\r\n * @prop {Object} bookProperties - the properties of each book like, name and image\r\n * @return each book listing with its image, name and author name(s),\r\n * besides the MoveBook dropdown component\r\n */\r\nfunction BookListing(props) {\r\n    const { name, authors, image, ID, currentShelf } = props.bookProperties;\r\n    return (\r\n        <div>\r\n            <div className='book'>\r\n                <div className='book-top'>\r\n                    {/* Used guard operator to handle the books with no image thumbnails */}\r\n                    {image && (\r\n                        <div\r\n                            className='book-cover'\r\n                            style={{\r\n                                width: 128,\r\n                                height: 193,\r\n                                backgroundImage: `url('${image}')`,\r\n                            }}\r\n                        />\r\n                    )}\r\n                    <MoveBook bookID={ID} currentShelf={currentShelf} />\r\n                </div>\r\n\r\n                <div className='book-title'>{name}</div>\r\n                {authors &&\r\n                    authors.map((author, index) => (\r\n                        <div className='book-authors' key={index}>\r\n                            {author} <br />\r\n                        </div>\r\n                    ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BookListing;\r\n","import React from 'react';\r\nimport BookListing from './BookListing';\r\nimport './../../App.css';\r\n\r\n/**\r\n * @description Represents each shelf in the main page with its title and respective books\r\n * @prop {String} shelfTitle - the title of the shelf like, Want to Read\r\n * @prop {Array} shelfBooks - the array containing all books of the given shelf\r\n * @return the title of each shelf and the book listings for each shelf\r\n */\r\nfunction Shelf(props) {\r\n    const { shelfTitle, shelfBooks } = props;\r\n\r\n    return (\r\n        <div>\r\n            <div className='list-books-content'>\r\n                <div className='bookshelf'>\r\n                    <h2 className='bookshelf-title'>{shelfTitle}</h2>\r\n                    <div className='bookshelf-books'>\r\n                        <ol className='books-grid'>\r\n                            {shelfBooks.map((shelfBook, index) => (\r\n                                <li key={index}>\r\n                                    <BookListing bookProperties={shelfBook} />\r\n                                </li>\r\n                            ))}\r\n                        </ol>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Shelf;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Shelf from './Shelf';\r\nimport './../../App.css';\r\n\r\n/**\r\n * @description Represents the main page\r\n * @prop {Array} currentlyReading - the books from Currently Reading shelf\r\n * @prop {Array} wantToRead - the books from Want to Read shelf\r\n * @prop {Array} read - the books from Read shelf\r\n * @return the title, the shelves (components) and the add button of the main page\r\n */\r\nfunction MainPage(props) {\r\n    const { currentlyReading, wantToRead, read } = props;\r\n\r\n    return (\r\n        <div>\r\n            <div className='list-books-title'>\r\n                <h1>MyReads</h1>\r\n            </div>\r\n            <Shelf\r\n                shelfTitle='Currently Reading'\r\n                shelfBooks={currentlyReading}\r\n            />\r\n            <Shelf shelfTitle='Want to Read' shelfBooks={wantToRead} />\r\n            <Shelf shelfTitle='Read' shelfBooks={read} />\r\n            <div className='open-search'>\r\n                <Link to='/search'>\r\n                    <button>Add a book</button>\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MainPage;\r\n","import React from 'react';\r\nimport BookListing from './../MainPage/BookListing';\r\nimport './../../App.css';\r\n\r\n/**\r\n * @description Lists all of the search results with BookListing component\r\n * @prop {Array} searchResults - the result of the search based on the search API\r\n */\r\nfunction SearchResults(props) {\r\n    const { searchResults } = props;\r\n    return (\r\n        <div className='search-books-results'>\r\n            <ol className='books-grid'>\r\n                {searchResults.map((searchResult, index) => (\r\n                    <li key={index}>\r\n                        <BookListing bookProperties={searchResult} />\r\n                    </li>\r\n                ))}\r\n            </ol>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchResults;\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport SearchResults from './SearchResults';\r\nimport './../../App.css';\r\nimport * as BooksAPI from './../../BooksAPI';\r\nimport { debounce } from 'throttle-debounce';\r\n\r\n/**\r\n * @description Represents the search page at /search, containing the search bar and the books listings\r\n * @extends Component\r\n */\r\nclass SearchPage extends Component {\r\n    state = {\r\n        searchResults: [],\r\n    };\r\n\r\n    /**\r\n     * @description Given the search term from the search bar input, the search API is invoked.\r\n     * Before including its results to the state, it is checked against the current shelves,\r\n     * in order to auto select them in dropdown if they are in the current shelves\r\n     * @param {String} term - The search term that the user inputs at the search bar\r\n     */\r\n    search(term) {\r\n        term === ''\r\n            ? this.setState({ searchResults: [] })\r\n            : BooksAPI.search(term.trim())\r\n                  .then(results => {\r\n                      this.setState({ searchResults: [] });\r\n                      results.forEach(result => {\r\n                          let currentShelf = 'none';\r\n                          for (let bookObject of this.props.shelfedBooks) {\r\n                              if (bookObject.ID === result.id) {\r\n                                  currentShelf = bookObject.currentShelf;\r\n                              }\r\n                          }\r\n\r\n                          const shelfBook = {\r\n                              name: result.title,\r\n                              authors: result.authors,\r\n                              image: result.imageLinks.smallThumbnail,\r\n                              ID: result.id,\r\n                              currentShelf: currentShelf,\r\n                          };\r\n\r\n                          this.setState(prevState => {\r\n                              return {\r\n                                  searchResults: prevState.searchResults.concat(\r\n                                      [shelfBook]\r\n                                  ),\r\n                              };\r\n                          });\r\n                      });\r\n                  })\r\n                  .catch(() =>\r\n                      console.log(\r\n                          'The book was either missing thumbnail or author. We filtered them out.'\r\n                      )\r\n                  );\r\n    }\r\n\r\n    /**\r\n     * @description Handles the search bar and its listings based on the term using SearchResults component\r\n     * @return the search bar alongside its back button and the SearchResults component\r\n     */\r\n    render() {\r\n        const { searchResults } = this.state;\r\n\r\n        return (\r\n            <div className='search-books'>\r\n                <div className='search-books-bar'>\r\n                    <Link to='/'>\r\n                        <button className='close-search'>Close</button>\r\n                    </Link>\r\n\r\n                    <div className='search-books-input-wrapper'>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='Search by title or author'\r\n                            ref={input => {\r\n                                this.textInput = input;\r\n                            }}\r\n                            onChange={debounce(500, () =>\r\n                                this.search(this.textInput.value)\r\n                            )}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <SearchResults searchResults={searchResults} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchPage;\r\n","import React, { Component } from 'react';\r\nimport * as BooksAPI from '../BooksAPI';\r\nimport { Route } from 'react-router-dom';\r\nimport MainPage from './MainPage/MainPage';\r\nimport SearchPage from './SearchPage/SearchPage';\r\n\r\n/**\r\n * @description Represents the entirety of the app, containing all components\r\n * @extends Component\r\n */\r\nclass App extends Component {\r\n    state = {\r\n        currentlyReading: [],\r\n        wantToRead: [],\r\n        read: [],\r\n    };\r\n\r\n    /**\r\n     * @description Fetches books in current shelves and populates the state respectively\r\n     */\r\n    componentDidMount() {\r\n        BooksAPI.getAll().then(books => {\r\n            books.forEach(book => {\r\n                const bookShelf = book.shelf;\r\n                const shelfBook = {\r\n                    name: book.title,\r\n                    authors: book.authors,\r\n                    image: book.imageLinks.smallThumbnail,\r\n                    ID: book.id,\r\n                    currentShelf: bookShelf,\r\n                };\r\n                this.setState(prevState => {\r\n                    return {\r\n                        [bookShelf]: prevState[[bookShelf]].concat([shelfBook]),\r\n                    };\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @description Renders and passes the fetched data to both components.\r\n     * Also routes them to their links.\r\n     */\r\n    render() {\r\n        const { currentlyReading, wantToRead, read } = this.state;\r\n        const shelfedBooks = [...currentlyReading, ...wantToRead, ...read];\r\n        return (\r\n            <div>\r\n                <Route\r\n                    exact\r\n                    path='/'\r\n                    render={() => (\r\n                        <MainPage\r\n                            currentlyReading={currentlyReading}\r\n                            wantToRead={wantToRead}\r\n                            read={read}\r\n                        />\r\n                    )}\r\n                />\r\n\r\n                <Route\r\n                    path='/search'\r\n                    render={() => <SearchPage shelfedBooks={shelfedBooks} />}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from './Components/App';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}